{"version":3,"file":"code.js","mappings":"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","sources":["webpack://cy-toolbox/./src/module/util.ts","webpack://cy-toolbox/./src/module/licenseManagement.ts","webpack://cy-toolbox/./src/module/spaciiing.ts","webpack://cy-toolbox/./src/module/memorizer.ts","webpack://cy-toolbox/./src/module/shortcut.ts","webpack://cy-toolbox/./src/module/instantiater.ts","webpack://cy-toolbox/./src/module/renamer.ts","webpack://cy-toolbox/./src/module/variableEditor.ts","webpack://cy-toolbox/./src/module/virtualProfile.ts","webpack://cy-toolbox/./src/plugin.ts","webpack://cy-toolbox/./src/module/init.ts","webpack://cy-toolbox/./src/module/framer.ts","webpack://cy-toolbox/./src/module/loremGenerator.ts","webpack://cy-toolbox/./src/module/selectionFilter.ts"],"sourcesContent":["// 取代原有的 fundamental-module.ts\nexport function deepClone(val) {\n    return JSON.parse(JSON.stringify(val));\n}\nexport function sendMessageBack(message) {\n    // console.log(\"Message sent back\");\n    // console.log(message);\n    figma.ui.postMessage({\n        pluginMessage: message,\n    });\n}\nexport function rgbToHex(r, g, b, withHashTag = true) {\n    // Ensure the RGB values are within the valid range\n    r = Math.round(r * 255);\n    g = Math.round(g * 255);\n    b = Math.round(b * 255);\n    // Convert each component to a 2-digit hexadecimal string\n    const hexR = r.toString(16).padStart(2, \"0\");\n    const hexG = g.toString(16).padStart(2, \"0\");\n    const hexB = b.toString(16).padStart(2, \"0\");\n    if (withHashTag) {\n        // Concatenate the hex components and prepend a '#'\n        return `#${hexR}${hexG}${hexB}`;\n    }\n    else {\n        // Concatenate the hex components and prepend a '#'\n        return `${hexR}${hexG}${hexB}`;\n    }\n}\nexport function rgbToRGB255(r, g, b) {\n    const newR = Math.round(r * 255);\n    const newG = Math.round(g * 255);\n    const newB = Math.round(b * 255);\n    return `R${newR}, G${newG}, B${newB}`;\n}\n// Function to get the current viewport and return it as a Vector type\nexport function getCurrentViewport() {\n    // Get the current viewport\n    const viewport = figma.viewport;\n    // Create a Vector object with the current viewport center coordinates\n    const vector = {\n        x: Math.round(viewport.center.x),\n        y: Math.round(viewport.center.y),\n    };\n    return vector;\n}\nexport function getCurrentSelection() {\n    // Get an array of the currently selected layers\n    return [...figma.currentPage.selection];\n}\nexport function getNodesInSelectedFrame() {\n    const selectedNode = figma.currentPage.selection[0];\n    if (selectedNode && selectedNode.type === \"FRAME\") {\n        return [...selectedNode.children];\n    }\n    return null;\n}\nexport function isNodeWithResizeMethod(node) {\n    return (node.type === \"FRAME\" ||\n        node.type === \"STAR\" ||\n        node.type === \"ELLIPSE\" ||\n        node.type === \"POLYGON\" ||\n        node.type === \"RECTANGLE\");\n}\nexport function mapToUnitRange(value) {\n    if (value < 0) {\n        return 0;\n    }\n    else if (value > 255) {\n        return 1;\n    }\n    else {\n        return value / 255;\n    }\n}\nexport function getBoundingBox(layers) {\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    layers.forEach((layer) => {\n        const { x, y, width, height } = layer;\n        if (x < minX)\n            minX = x;\n        if (y < minY)\n            minY = y;\n        if (x + width > maxX)\n            maxX = x + width;\n        if (y + height > maxY)\n            maxY = y + height;\n    });\n    const width = maxX - minX;\n    const height = maxY - minY;\n    return { width, height };\n}\nexport function getSelectionPosition(layers) {\n    let minX = Infinity;\n    let minY = Infinity;\n    layers.forEach((layer) => {\n        const { x, y } = layer;\n        if (x < minX)\n            minX = x;\n        if (y < minY)\n            minY = y;\n    });\n    return { x: minX, y: minY };\n}\nexport function hasImageFill(node) {\n    return (Array.isArray(node.fills) &&\n        node.fills.some((fill) => fill.type === \"IMAGE\"));\n}\n// Utility function to convert RGBA from 0-255 range to 0-1 range\nexport function convertColorRange(rgba) {\n    return {\n        r: rgba.r / 255,\n        g: rgba.g / 255,\n        b: rgba.b / 255,\n        a: rgba.a,\n    };\n}\nexport function hexToRgb(hex) {\n    // Remove the hash at the start if it's there\n    hex = hex.replace(/^#/, \"\");\n    // Parse the r, g, b values\n    const bigint = parseInt(hex, 16);\n    const r = ((bigint >> 16) & 255) / 255;\n    const g = ((bigint >> 8) & 255) / 255;\n    const b = (bigint & 255) / 255;\n    return { r, g, b };\n}\n// Helper function to format the date as MM/DD\nexport function getFormattedDate() {\n    const today = new Date();\n    const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Months are zero-based\n    const day = String(today.getDate()).padStart(2, \"0\");\n    return `${month}/${day}`;\n}\n/**\n * Adds a specified number of hours to the given date.\n * @param date The original date.\n * @param hours The number of hours to add.\n * @returns A new date object with the hours added.\n */\nexport function addHours(date, hours) {\n    // Create a new date object based on the provided date\n    const resultDate = new Date(date);\n    // Add the specified number of hours\n    resultDate.setHours(resultDate.getHours() + hours);\n    // Return the modified date\n    return resultDate;\n}\nexport function convertUTCStringToDate(utcString) {\n    return new Date(utcString);\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as util from \"./util\";\nexport function initLicenseCheck() {\n    return __awaiter(this, void 0, void 0, function* () {\n        // 檢查用戶的Client Storage是否有儲存license key\n        const STORAGE_KEY = \"license-management\";\n        const licenseData = yield figma.clientStorage.getAsync(STORAGE_KEY);\n        if (licenseData) {\n            // 有License Data\n            const license = JSON.parse(licenseData);\n            const message = {\n                action: \"VERIFY\",\n                license: license,\n                module: \"LicenseManagement\",\n                phase: \"Init\",\n                direction: \"Outer\",\n            };\n            util.sendMessageBack(message);\n        }\n        else {\n            // 沒有License Data\n            const expiredTime = util.addHours(new Date(), 6).toUTCString();\n            const license = {\n                tier: \"FREE\",\n                isLicenseActive: false,\n                licenseKey: \"\",\n                sessionExpiredAt: expiredTime,\n            };\n            yield figma.clientStorage.setAsync(STORAGE_KEY, JSON.stringify(license));\n        }\n        // if (licenseData) {\n        //   // 有License Data\n        //   const license = JSON.parse(licenseData) as LicenseManagement;\n        //   console.log(\"✅有License Data\");\n        //   console.log(license);\n        //   //\n        //   // 臨時的License Data，待會要存進去\n        //   const newLicense = license;\n        //   //\n        //   // 檢查License 是否過期\n        //   const oldDate = util.convertUTCStringToDate(license.sessionExpiredAt);\n        //   if (oldDate <= new Date()) {\n        //     //\n        //     // 檢查會員等級\n        //     if (license.tier == \"PAID\") {\n        //       if (license.licenseKey != \"\") {\n        //         // 執行API驗證\n        //         //   try {\n        //         //     const response = await paymentsUtil.verifyLicenseKey(\n        //         //       license.licenseKey\n        //         //     );\n        //         //     if (response.success) {\n        //         //       license.tier = \"PAID\";\n        //         //       console.log(\"License is successfully verified.\");\n        //         //     }\n        //         //   } catch (error) {\n        //         //     license.tier = \"UNKNOWN\";\n        //         //     console.error(\n        //         //       \"License validation failed due to unknown error:\" + error\n        //         //     );\n        //         //   }\n        //       } else {\n        //         license.tier = \"UNKNOWN\";\n        //         console.error(\"License validation failed due to empty license key.\");\n        //       }\n        //     }\n        //   }\n        //   const newExpiredTime = util.addHours(oldDate, 6).toUTCString();\n        //   newLicense.sessionExpiredAt = newExpiredTime;\n        //   //\n        //   // 儲存\n        //   const message: ExternalMessageLicenseManagement = {\n        //     action: \"UPDATE\",\n        //     license: newLicense,\n        //     module: \"LicenseManagement\",\n        //     phase: \"Init\",\n        //     direction: \"Outer\",\n        //   };\n        //   await figma.clientStorage.setAsync(STORAGE_KEY, JSON.stringify(newLicense));\n        //   util.sendMessageBack(message);\n        //   console.log(\"✅更新後的License Data\");\n        //   console.log(newLicense);\n        // } else {\n        //   console.log(\"❌沒有License Data\");\n        //   const expiredTime = util.addHours(new Date(), 6).toUTCString();\n        //   const license: LicenseManagement = {\n        //     tier: \"FREE\",\n        //     isLicenseActive: false,\n        //     licenseKey: \"\",\n        //     sessionExpiredAt: expiredTime,\n        //   };\n        //   const message: ExternalMessageLicenseManagement = {\n        //     action: \"UPDATE\",\n        //     license: license,\n        //     module: \"LicenseManagement\",\n        //     phase: \"Init\",\n        //     direction: \"Outer\",\n        //   };\n        //   await figma.clientStorage.setAsync(STORAGE_KEY, JSON.stringify(license));\n        //   util.sendMessageBack(message);\n        // }\n    });\n}\nexport function reception(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (message.action == \"UPDATE\") {\n            setLicenseToLocalStorage(message.license);\n        }\n    });\n}\nfunction setLicenseToLocalStorage(license) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const STORAGE_KEY = \"license-management\";\n        yield figma.clientStorage.setAsync(STORAGE_KEY, JSON.stringify(license));\n    });\n}\n","import * as util from \"./util\";\nfunction compareWithAxis(axis) {\n    return (a, b) => {\n        if (a[axis] < b[axis]) {\n            return -1;\n        }\n        if (a[axis] > b[axis]) {\n            return 1;\n        }\n        return 0;\n    };\n}\nexport function useSpacing(message) {\n    const selectedLayers = util.getCurrentSelection();\n    // Check if message.spacing is a valid number\n    const spacing = Number(message.spacing);\n    if (isNaN(spacing)) {\n        figma.notify(\"❌ The spacing value must be a number.\");\n        return;\n    }\n    // Save custom spacing value if applicable\n    if (message.useCustomValue === true) {\n        figma.currentPage.setPluginData(\"recent-custom-spacing\", String(spacing));\n    }\n    applySpacingToLayers(selectedLayers, spacing, message.mode, message.addAutolayout);\n}\nexport function applySpacingToLayers(layers, spacing, mode, addAutolayout, returnFinalFrame = false) {\n    // Ensure at least 2 layers are selected\n    if (layers.length < 2) {\n        figma.notify(\"❌ Please select at least two objects.\");\n        return;\n    }\n    // Determine the axis and size property based on the mode\n    const isVerticalMode = mode === \"vertical\";\n    const axis = isVerticalMode ? \"y\" : \"x\";\n    const sizeProp = isVerticalMode ? \"height\" : \"width\";\n    // Sort selected layers based on the chosen axis\n    layers.sort(compareWithAxis(axis));\n    // Adjust the positions of the layers\n    for (let i = 0; i < layers.length - 1; i++) {\n        const currentLayer = layers[i];\n        const nextLayer = layers[i + 1];\n        nextLayer[axis] = currentLayer[axis] + currentLayer[sizeProp] + spacing;\n    }\n    // Calculate the bounding box dimensions of the selected layers\n    const selectionBoundingBox = util.getBoundingBox(layers);\n    const selectionPosition = util.getSelectionPosition(layers);\n    if (addAutolayout) {\n        // Create a new frame with autolayout\n        const autolayoutFrame = figma.createFrame();\n        // Set the autolayout properties\n        autolayoutFrame.layoutMode = isVerticalMode ? \"VERTICAL\" : \"HORIZONTAL\";\n        autolayoutFrame.itemSpacing = spacing;\n        // Add the selected layers to the autolayout frame\n        layers.forEach((layer) => {\n            figma.currentPage.appendChild(autolayoutFrame);\n            autolayoutFrame.appendChild(layer);\n        });\n        // Resize the autolayout frame to fit its contents\n        autolayoutFrame.resize(selectionBoundingBox.width, selectionBoundingBox.height);\n        autolayoutFrame.x = selectionPosition.x;\n        autolayoutFrame.y = selectionPosition.y;\n        // Ensure no fill is applied to the autolayout frame\n        autolayoutFrame.fills = [];\n        // Select the autolayout frame\n        figma.currentPage.selection = [autolayoutFrame];\n        if (returnFinalFrame) {\n            return autolayoutFrame;\n        }\n    }\n    // Notify the user of successful spacing adjustment\n    figma.notify(`✅ Spacing set to ${spacing} successfully.`);\n    // Return the objects if requested\n}\n","import * as util from \"./util\";\nexport function useQuickAction(message) {\n    switch (message.action) {\n        case \"newFrame\":\n            makeNewFrame();\n            break;\n        case \"setResizableNodeWidth\":\n            setResizableNodeSize(\"width\");\n            break;\n        case \"setResizableNodeHeight\":\n            setResizableNodeSize(\"height\");\n            break;\n        case \"memorizeObjectWidth\":\n            memorizeObjectSize(\"width\");\n            break;\n        case \"memorizeObjectHeight\":\n            memorizeObjectSize(\"height\");\n            break;\n        case \"memorizedObjectName\":\n            memorzieObjectName();\n            break;\n        case \"setSelectionToMemorizedName\":\n            setSelectionToMemorizedName();\n            break;\n        default:\n            break;\n    }\n}\nfunction setSelectionToMemorizedName() {\n    const selection = util.getCurrentSelection();\n    // Check if there is any selection\n    if (selection.length === 0) {\n        figma.notify(\"❌ No object is selected.\");\n        return;\n    }\n    // Retrieve the stored name\n    const storedName = figma.currentPage.getPluginData(\"memorized-object-name\");\n    // Check if a name has been stored\n    if (!storedName) {\n        figma.notify(\"❌ Cannot find stored name.\");\n        return;\n    }\n    // Set the name of each selected layer to the stored name\n    selection.forEach((layer) => {\n        layer.name = storedName;\n    });\n    // Notify the user of the successful name change\n    figma.notify(`✅ The name of ${selection.length} object(s) has been set.`);\n}\nfunction memorzieObjectName() {\n    const selection = util.getCurrentSelection();\n    // Check if exactly one item is selected\n    if (selection.length !== 1) {\n        figma.notify(\"❌ Please select only one object.\");\n        return;\n    }\n    const selectedNode = selection[0];\n    // Additional error checking to ensure the frame node has name\n    if (selectedNode.name == \"\") {\n        figma.notify(\"❌ The selected object's name cannot be empty.\");\n        return;\n    }\n    const memorizedObjectName = selectedNode.name;\n    figma.currentPage.setPluginData(\"memorized-object-name\", String(memorizedObjectName));\n    figma.notify(`✅ Name memorized：${memorizedObjectName}`);\n    // Retrieve the stored name\n    const storedName = figma.currentPage.getPluginData(\"memorized-object-name\");\n    // Send the updated frame size back\n    const message = {\n        module: \"Memorizer\",\n        mode: \"UpdateMemorizedName\",\n        memorizedName: storedName,\n        direction: \"Outer\",\n        phase: \"Actual\",\n    };\n    util.sendMessageBack(message);\n}\nfunction memorizeObjectSize(dimension) {\n    const selection = util.getCurrentSelection();\n    // Check if exactly one item is selected\n    if (selection.length !== 1) {\n        figma.notify(\"❌ Please select only one object.\");\n        return;\n    }\n    const selectedNode = selection[0];\n    // Additional error checking to ensure the frame node has width and height properties\n    if (typeof selectedNode.width !== \"number\" ||\n        typeof selectedNode.height !== \"number\") {\n        figma.notify(\"❌ The selected object's width and height must be set to a number.\");\n        return;\n    }\n    if (dimension === \"width\" || dimension === \"both\") {\n        const memorizedObjectWidth = selectedNode.width;\n        figma.currentPage.setPluginData(\"memorized-object-width\", String(memorizedObjectWidth));\n        figma.notify(`✅ Width memorized：${memorizedObjectWidth}`);\n    }\n    if (dimension === \"height\" || dimension === \"both\") {\n        const memorizedObjectHeight = selectedNode.height;\n        figma.currentPage.setPluginData(\"memorized-object-height\", String(memorizedObjectHeight));\n        figma.notify(`✅ Height memorized：${memorizedObjectHeight}`);\n    }\n    // Retrieve the stored width and height\n    const storedWidth = figma.currentPage.getPluginData(\"memorized-object-width\");\n    const storedHeight = figma.currentPage.getPluginData(\"memorized-object-height\");\n    // Send the updated frame size back\n    const message = {\n        module: \"Memorizer\",\n        mode: \"UpdateFrameToMemorizedSize\",\n        memorizedObjectWidth: dimension === \"width\" || dimension === \"both\" ? storedWidth : \"\",\n        memorizedObjectHeight: dimension === \"height\" || dimension === \"both\" ? storedHeight : \"\",\n        direction: \"Outer\",\n        phase: \"Actual\",\n    };\n    util.sendMessageBack(message);\n}\nfunction setResizableNodeSize(dimension) {\n    const selection = figma.currentPage.selection;\n    if (selection.length === 0) {\n        figma.notify(\"Please select at least one object.\");\n        return;\n    }\n    const storedWidth = figma.currentPage.getPluginData(\"memorized-object-width\");\n    const storedHeight = figma.currentPage.getPluginData(\"memorized-object-height\");\n    selection.forEach((selectedNode) => {\n        if (!selectedNode) {\n            figma.notify(\"The selected object is invalid.\");\n            return;\n        }\n        if (!util.isNodeWithResizeMethod(selectedNode)) {\n            figma.notify(\"Resizing selected object is not supported.\");\n            return;\n        }\n        // Handle setting width or height based on the dimension parameter\n        if (dimension === \"width\") {\n            if (!storedWidth) {\n                figma.notify(\"The width has not been memorized yet.\");\n            }\n            else {\n                const newWidth = Number(storedWidth);\n                selectedNode.resize(newWidth, selectedNode.height);\n                figma.notify(`Width set: ${newWidth}`);\n            }\n        }\n        else if (dimension === \"height\") {\n            if (!storedHeight) {\n                figma.notify(\"The height has not been memorized yet.\");\n            }\n            else {\n                const newHeight = Number(storedHeight);\n                selectedNode.resize(selectedNode.width, newHeight);\n                figma.notify(`Height set: ${newHeight}`);\n            }\n        }\n    });\n}\nfunction makeNewFrame() {\n    const storedWidth = figma.currentPage.getPluginData(\"memorized-object-width\");\n    const storedHeight = figma.currentPage.getPluginData(\"memorized-object-height\");\n    const viewport = util.getCurrentViewport();\n    // Create a new frame\n    const newFrame = figma.createFrame();\n    newFrame.x = viewport.x;\n    newFrame.y = viewport.y;\n    console.log(storedWidth, storedHeight);\n    if (storedWidth == undefined && storedHeight == undefined) {\n        newFrame.resize(375, 812);\n    }\n    else {\n        newFrame.resize(Number(storedWidth), Number(storedHeight));\n    }\n    // Set any other properties or styles of the frame as needed\n    // Add the new frame to the current page\n    figma.currentPage.appendChild(newFrame);\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as util from \"./util\";\nimport * as spaciiing from \"./spaciiing\";\nexport function executeShortcut(message) {\n    if (message.phase == undefined) {\n        figma.notify(`❌ The \"phase\" property of the message is not set.`);\n        return;\n    }\n    if (message.phase == \"Init\") {\n        initShortcut();\n    }\n    if (message.phase == \"Actual\") {\n        switch (message.action) {\n            case \"makeFrameOverlay\":\n                makeOverlay();\n                break;\n            case \"colorToLabelHEX\":\n                generateLableFromObjectFillColor(\"HEX\");\n                break;\n            case \"colorToLabelRGB\":\n                generateLableFromObjectFillColor(\"RGB\");\n                break;\n            case \"convertSelectionToTextStyles\":\n                convertSelectionToTextStyles();\n                break;\n            case \"generateIconTemplate\":\n                generateIconTemplate(message);\n                break;\n            case \"memorizeNote\":\n                memorizeSelectedNodeId(\"note\");\n                break;\n            case \"memorizeTitleSection\":\n                memorizeSelectedNodeId(\"titleSection\");\n                break;\n            case \"memorizeDesignStatusTag\":\n                memorizeSelectedNodeId(\"designStatusTag\");\n                break;\n            case \"generateNote\":\n                generateMagicalObjectMember(message);\n                break;\n            case \"generateDesignStatusTag\":\n                generateMagicalObjectMember(message);\n                break;\n            case \"generateTitleSection\":\n                generateMagicalObjectMember(message);\n                break;\n            case \"findAndReplace\":\n                findAndReplaceInSelection(message);\n                break;\n            default:\n                break;\n        }\n    }\n    if (message.phase == \"WillEnd\") {\n        shortcutWillEnd(message);\n    }\n}\nfunction initShortcut() {\n    const pluginDataKey = \"magical-object\";\n    const data = figma.root.getPluginData(pluginDataKey);\n    if (data == \"\") {\n        //\n    }\n    else {\n        // 有找到設置的magical object\n        const mo = JSON.parse(data);\n        const message = {\n            magicalObject: mo,\n            module: \"Shortcut\",\n            direction: \"Outer\",\n            phase: \"Init\",\n        };\n        util.sendMessageBack(message);\n    }\n}\nfunction shortcutWillEnd(message) {\n    console.log(\"Shorcut will End.\");\n    const pluginDataKey = \"magical-object\";\n    const mo = message.magicalObject;\n    figma.root.setPluginData(pluginDataKey, JSON.stringify(mo));\n}\nfunction findAndReplaceInSelection(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const selection = util.getCurrentSelection();\n        // Recursive function to find all text layers within the selection\n        function findAllTextLayers(nodes) {\n            let textLayers = [];\n            for (const node of nodes) {\n                if (node.type === \"TEXT\" || node.type === \"SHAPE_WITH_TEXT\") {\n                    textLayers.push(node);\n                }\n                else if (\"children\" in node) {\n                    textLayers = textLayers.concat(findAllTextLayers([...node.children]));\n                }\n            }\n            return textLayers;\n        }\n        const texts = findAllTextLayers([...selection]);\n        // Check if there are any texts found\n        if (texts.length === 0) {\n            figma.notify(\"❌ Please select at least one text layer.\");\n            return;\n        }\n        let replacedLayersCount = 0;\n        // Loop through each text node\n        for (const text of texts) {\n            if (text.type === \"TEXT\") {\n                yield figma.loadFontAsync(text.fontName);\n                const oldName = text.name;\n                const oldText = text.characters;\n                const newText = oldText\n                    .split(message.findCriteria)\n                    .join(message.replaceCriteria);\n                if (newText !== oldText) {\n                    text.characters = newText;\n                    replacedLayersCount++;\n                }\n                if (message.keepOriginalLayerName) {\n                    text.name = oldName;\n                }\n            }\n            else if (text.type === \"SHAPE_WITH_TEXT\" && text.text) {\n                yield figma.loadFontAsync(text.text.fontName);\n                const oldName = text.name;\n                const oldText = text.text.characters;\n                const newText = oldText\n                    .split(message.findCriteria)\n                    .join(message.replaceCriteria);\n                if (newText !== oldText) {\n                    text.text.characters = newText;\n                    replacedLayersCount++;\n                }\n                if (message.keepOriginalLayerName) {\n                    text.name = oldName;\n                }\n            }\n        }\n        figma.notify(`✅ Replaced text in ${replacedLayersCount} layer(s).`);\n    });\n}\nfunction generateMagicalObjectMember(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const selection = figma.currentPage.selection;\n        // Filter selection to only include frames\n        const frames = selection.filter((node) => node.type === \"FRAME\");\n        // Check if there are any frames selected\n        if (frames.length === 0) {\n            figma.notify(\"❌ Please select at least one frame.\");\n            return;\n        }\n        // Find the component using the componentId from the message\n        const component = yield figma.getNodeByIdAsync(message.componentId);\n        // Check if the component exists and is of type COMPONENT or COMPONENT_SET\n        if (!component ||\n            (component.type !== \"COMPONENT\" && component.type !== \"COMPONENT_SET\")) {\n            figma.notify(\"❌ Component not found or invalid type.\");\n            return;\n        }\n        // Create an instance of the component or component set\n        let instance;\n        if (component.type === \"COMPONENT\") {\n            instance = component.createInstance();\n        }\n        else if (component.type === \"COMPONENT_SET\") {\n            // Create an instance of the default variant\n            instance = component.defaultVariant.createInstance();\n        }\n        // Check if the instance was created successfully\n        if (!instance) {\n            figma.notify(\"❌ Instance creation failed.\");\n            return;\n        }\n        console.log(message.member);\n        if (message.member == \"titleSection\") {\n            // Find the most left frame\n            let mostLeftFrame = frames[0];\n            for (const frame of frames) {\n                if (frame.x < mostLeftFrame.x) {\n                    mostLeftFrame = frame;\n                }\n            }\n            // Create a new instance above the most left frame\n            const newInstance = instance.clone();\n            // Start updating from the instance root\n            updateDateText(newInstance);\n            // Set the position of the instance to be 40px above the most left frame\n            newInstance.x = mostLeftFrame.x;\n            newInstance.y = mostLeftFrame.y - newInstance.height - 40;\n            // Add the instance to the same parent as the most left frame\n            figma.currentPage.appendChild(newInstance);\n            figma.notify(\"✅ Component instance generated above the most left frame.\");\n        }\n        else {\n            // Iterate over each selected frame and create an instance on top of it\n            for (const frame of frames) {\n                // Create a new instance for each frame\n                const newInstance = instance.clone();\n                // Start updating from the instance root\n                updateDateText(newInstance);\n                // Set the position of the instance to be 40px above the selected frame\n                newInstance.x = frame.x;\n                newInstance.y = frame.y - newInstance.height - 40;\n                // Add the instance to the same parent as the selected frame\n                figma.currentPage.appendChild(newInstance);\n            }\n            instance.remove();\n            figma.notify(\"✅ Component instances generated above the selected frames.\");\n        }\n    });\n}\n// Function to find and update the text layer named \"%DATE%\"\nfunction updateDateText(node) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (node.type === \"TEXT\" && node.name === \"%DATE%\") {\n            const textNode = node;\n            yield figma.loadFontAsync(textNode.fontName);\n            textNode.characters = util.getFormattedDate();\n            textNode.locked = true;\n        }\n        else if (\"children\" in node) {\n            for (const child of node.children) {\n                updateDateText(child);\n            }\n        }\n    });\n}\nfunction memorizeSelectedNodeId(member) {\n    const selection = util.getCurrentSelection();\n    if (selection.length !== 1) {\n        figma.notify(\"❌ Please select only one layer.\");\n        return;\n    }\n    const selectedNode = selection[0];\n    if (selectedNode.type != \"COMPONENT_SET\" &&\n        selectedNode.type != \"COMPONENT\") {\n        figma.notify(\"❌ Please select a component or component set.\");\n        return;\n    }\n    const pluginDataKey = \"magical-object\";\n    const data = figma.root.getPluginData(pluginDataKey);\n    if (data != \"\") {\n        // 有找到設置的magical object\n        const mo = JSON.parse(data);\n        switch (member) {\n            case \"note\":\n                mo.noteId = selectedNode.id;\n                break;\n            case \"designStatusTag\":\n                mo.designStatusTagId = selectedNode.id;\n                break;\n            case \"titleSection\":\n                mo.titleSectionId = selectedNode.id;\n                break;\n            default:\n                break;\n        }\n        const message = {\n            magicalObject: mo,\n            module: \"Shortcut\",\n            direction: \"Outer\",\n            phase: \"Actual\",\n        };\n        util.sendMessageBack(message);\n        figma.root.setPluginData(pluginDataKey, JSON.stringify(mo));\n        figma.notify(`✅ ID Set to ${selectedNode.id}`);\n    }\n}\nfunction generateIconTemplate(message) {\n    const system = message.system;\n    const quantity = message.quantity;\n    const viewport = util.getCurrentViewport();\n    // Determine inner frame size based on system\n    let innerFrameSize;\n    if (system === 24) {\n        innerFrameSize = 20;\n    }\n    else if (system === 48) {\n        innerFrameSize = 40;\n    }\n    else {\n        console.error(\"Unsupported system size. Only 24 and 48 are supported.\");\n        return;\n    }\n    const results = [];\n    // Generate the components\n    for (let i = 0; i < quantity; i++) {\n        // Create the outer frame\n        const outerFrame = figma.createFrame();\n        outerFrame.resize(system, system);\n        outerFrame.name = `Outer Frame ${i + 1}`;\n        outerFrame.x = viewport.x;\n        outerFrame.y = viewport.y;\n        // Create the inner frame\n        const innerFrame = figma.createFrame();\n        innerFrame.resize(innerFrameSize, innerFrameSize);\n        innerFrame.name = `CONTENT`;\n        // Center the inner frame within the outer frame\n        innerFrame.x = (outerFrame.width - innerFrame.width) / 2;\n        innerFrame.y = (outerFrame.height - innerFrame.height) / 2;\n        // Set constraints for the inner frame to scale on both sides\n        innerFrame.constraints = {\n            horizontal: \"SCALE\",\n            vertical: \"SCALE\",\n        };\n        // Add the inner frame to the outer frame\n        outerFrame.appendChild(innerFrame);\n        // Create a component from the outer frame\n        const component = figma.createComponent();\n        component.resize(outerFrame.width, outerFrame.height);\n        component.name = `Icon${system}/${i + 1}`;\n        component.x = viewport.x;\n        component.y = viewport.y;\n        // Move the outer frame's children to the component\n        while (outerFrame.children.length > 0) {\n            component.appendChild(outerFrame.children[0]);\n        }\n        // Remove the empty outer frame\n        outerFrame.remove();\n        results.push(component);\n    }\n    results.forEach((item) => {\n        // Add the component to the Figma current page\n        figma.currentPage.appendChild(item);\n    });\n    figma.currentPage.selection = results;\n    const spacing = 8;\n    const mode = \"horizontal\";\n    const addAutolayout = false;\n    spaciiing.applySpacingToLayers(results, spacing, mode, addAutolayout, false);\n}\nfunction generateLableFromObjectFillColor(type) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const selection = figma.currentPage.selection;\n        if (selection.length === 0) {\n            figma.notify(\"❌ Please select at least one object with fill color.\");\n            return;\n        }\n        yield figma.loadFontAsync({ family: \"Inter\", style: \"Regular\" });\n        for (const selectedNode of selection) {\n            if (\"fills\" in selectedNode) {\n                const fills = selectedNode.fills;\n                if (Array.isArray(fills) &&\n                    fills.length > 0 &&\n                    fills[0].type === \"SOLID\") {\n                    const rectColor = fills[0].color;\n                    if (type == \"HEX\") {\n                        const hexColor = util.rgbToHex(rectColor.r, rectColor.g, rectColor.b);\n                        const textNode = figma.createText();\n                        textNode.fontSize = 20;\n                        textNode.characters = hexColor;\n                        textNode.name = \"HEX_LABEL\";\n                        textNode.x = selectedNode.x;\n                        textNode.y = selectedNode.y + selectedNode.height + 16;\n                        figma.currentPage.appendChild(textNode);\n                    }\n                    else {\n                        const rgbColor = util.rgbToRGB255(rectColor.r, rectColor.g, rectColor.b);\n                        const textNode = figma.createText();\n                        textNode.fontSize = 20;\n                        textNode.characters = rgbColor;\n                        textNode.name = \"RGB_LABEL\";\n                        textNode.x = selectedNode.x;\n                        textNode.y = selectedNode.y + selectedNode.height + 16;\n                        figma.currentPage.appendChild(textNode);\n                    }\n                }\n            }\n        }\n    });\n}\nfunction makeOverlay() {\n    const storedWidth = figma.currentPage.getPluginData(\"memorized-object-width\");\n    const storedHeight = figma.currentPage.getPluginData(\"memorized-object-height\");\n    const selection = figma.currentPage.selection;\n    if (selection.length === 1 && selection[0].type === \"FRAME\") {\n        const selectedFrame = selection[0];\n        const rectangle = figma.createRectangle();\n        if (storedWidth != undefined && storedHeight != undefined) {\n            rectangle.resize(Number(storedWidth), Number(storedHeight));\n        }\n        else {\n            rectangle.resize(375, 812);\n        }\n        rectangle.x = 0;\n        rectangle.y = 0;\n        rectangle.fills = [\n            { type: \"SOLID\", color: { r: 0, g: 0, b: 0 }, opacity: 0.5 },\n        ];\n        rectangle.name = \"Overlay\";\n        rectangle.locked = true;\n        selectedFrame.appendChild(rectangle);\n    }\n    else {\n        // No frame selected or multiple items selected\n        console.log(\"Please select a single frame.\");\n    }\n}\nfunction convertSelectionToTextStyles() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const selection = figma.currentPage.selection;\n        if (!selection || selection.length === 0) {\n            figma.notify(\"❌ No nodes selected. Please select some text nodes.\");\n            return;\n        }\n        const textNodes = selection.filter((node) => node.type === \"TEXT\");\n        if (textNodes.length === 0) {\n            figma.notify(\"❌ No text nodes selected. Please select some text nodes.\");\n            return;\n        }\n        // Collect unique fonts to load\n        const fontsToLoad = new Set();\n        textNodes.forEach((node) => {\n            if (typeof node.fontName !== \"symbol\") {\n                fontsToLoad.add(node.fontName);\n            }\n        });\n        try {\n            // Load all unique fonts\n            yield Promise.all(Array.from(fontsToLoad).map((font) => figma.loadFontAsync(font)));\n            textNodes.forEach((node) => {\n                if (typeof node.fontName === \"symbol\" ||\n                    typeof node.fontSize === \"symbol\" ||\n                    typeof node.letterSpacing === \"symbol\" ||\n                    typeof node.lineHeight === \"symbol\") {\n                    return;\n                }\n                const newTextStyle = figma.createTextStyle();\n                newTextStyle.name = node.characters.substring(0, 30); // Limiting the name length\n                newTextStyle.fontSize = node.fontSize;\n                newTextStyle.textDecoration = \"NONE\";\n                newTextStyle.fontName = node.fontName;\n                newTextStyle.letterSpacing = node.letterSpacing;\n                newTextStyle.lineHeight = node.lineHeight;\n            });\n            figma.notify(\"✅ Text styles created successfully!\");\n        }\n        catch (error) {\n            console.error(\"Error creating text styles:\", error);\n            figma.notify(\"❌ Error creating text styles. Please check the console for more details.\");\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as util from \"./util\";\nimport * as spaciiing from \"./spaciiing\";\nimport iosDefaultPaletteData from \"../assets/colors/iosDefaultPalette.json\";\nimport iosDefaultDropShadowData from \"../assets/effects/iosDefaultDropShadow.json\";\nimport iosTypographyLargeData from \"../assets/typography/iosTypographyLarge.json\";\nexport function instantiateTarget(message) {\n    // 色彩資料\n    const iosDefaultPalette = iosDefaultPaletteData;\n    const iosDefaultDropShadow = iosDefaultDropShadowData;\n    const iosTypographyLarge = iosTypographyLargeData;\n    if (message.type == \"actual\") {\n        if (message.form == \"style\") {\n            switch (message.target) {\n                case \"iosColorDefaultPaletteLight\":\n                    generateColorStyle(iosDefaultPalette, \"light\");\n                    break;\n                case \"iosColorDefaultPaletteDark\":\n                    generateColorStyle(iosDefaultPalette, \"dark\");\n                    break;\n                case \"iosEffectDefaultDropShadow\":\n                    generateEffectStyle(iosDefaultDropShadow);\n                    break;\n                case \"iosTypographyLarge\":\n                    generateTextNode(iosTypographyLarge);\n                    break;\n                default:\n                    break;\n            }\n        }\n        else {\n            // Do something\n            switch (message.target) {\n                case \"iosColorDefaultPaletteLight\":\n                    generateColorVariable(iosDefaultPalette);\n                    break;\n                case \"iosColorDefaultPaletteDark\":\n                    generateColorVariable(iosDefaultPalette);\n                    break;\n                case \"iosEffectDefaultDropShadow\":\n                    // generateEffectStyle(iosDefaultDropShadow);\n                    break;\n                case \"iosTypographyLarge\":\n                    // generateTextNode(iosTypographyLarge);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    else if (message.type == \"explanation\") {\n        // Do something\n        switch (message.target) {\n            case \"iosColorDefaultPaletteLight\":\n                generateExplanationText(iosDefaultPalette);\n                break;\n            case \"iosColorDefaultPaletteDark\":\n                generateExplanationText(iosDefaultPalette);\n                break;\n            case \"iosEffectDefaultDropShadow\":\n                generateExplanationText(iosDefaultDropShadow);\n                break;\n            case \"iosTypographyLarge\":\n                generateExplanationText(iosTypographyLarge);\n                break;\n            default:\n                break;\n        }\n    }\n}\n// Define the function\nfunction generateColorVariable(collection) {\n    // Create a new variable collection\n    const variableCollection = figma.variables.createVariableCollection(collection.name);\n    // Add \"light\" and \"dark\" modes to the collection\n    const lightModeId = variableCollection.addMode(\"Light\");\n    const darkModeId = variableCollection.addMode(\"Dark\");\n    // Iterate over each member in the collection and create variables\n    for (const member of collection.members) {\n        // Create a new variable for the current color member\n        const variable = figma.variables.createVariable(member.name, variableCollection, \"COLOR\");\n        // Set the description of the variable\n        variable.description = member.description;\n        // Set the values for light and dark modes\n        variable.setValueForMode(lightModeId, util.convertColorRange(member.color.light));\n        variable.setValueForMode(darkModeId, util.convertColorRange(member.color.dark));\n    }\n    // Remove any modes that are not \"Light\" or \"Dark\"\n    variableCollection.modes.forEach((mode) => {\n        if (mode.modeId !== lightModeId && mode.modeId !== darkModeId) {\n            variableCollection.removeMode(mode.modeId);\n        }\n    });\n    // Notify the user that the variable collection has been created\n    figma.notify(`✅ Collection \"${collection.name}\" created successfully.`);\n}\nfunction generateExplanationText(collection) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const viewport = util.getCurrentViewport();\n        const baseFontSize = 16;\n        // Load all necessary fonts\n        const fontsToLoad = [\n            { family: \"Inter\", style: \"Regular\" },\n            { family: \"Inter\", style: \"Semi Bold\" },\n        ];\n        yield Promise.all(fontsToLoad.map((font) => figma.loadFontAsync(font)));\n        // 結果\n        const results = [];\n        // 說明文字\n        const explanationTextTitle = `Usage definition of ${collection.brand} - ${collection.name}`;\n        const explanationTitleNode = figma.createText();\n        explanationTitleNode.fontName = { family: \"Inter\", style: \"Semi Bold\" };\n        explanationTitleNode.x = viewport.x;\n        explanationTitleNode.y = viewport.y;\n        explanationTitleNode.characters = explanationTextTitle;\n        explanationTitleNode.fontSize = baseFontSize;\n        results.push(explanationTitleNode);\n        collection.members.forEach((member) => {\n            const description = member.description == \"\" ? \"(blank)\" : member.description;\n            const explanation = `${member.name} : ${description}`;\n            const explanationNode = figma.createText();\n            explanationNode.characters = explanation;\n            explanationNode.fontSize = baseFontSize;\n            explanationNode.x = viewport.x;\n            explanationNode.y = viewport.y;\n            results.push(explanationNode);\n        });\n        results.forEach((item) => {\n            figma.currentPage.appendChild(item);\n        });\n        figma.currentPage.selection = results;\n        const spacing = 8;\n        const mode = \"vertical\";\n        const addAutolayout = true;\n        const frame = spaciiing.applySpacingToLayers(results, spacing, mode, addAutolayout, true);\n        if (frame) {\n            // Set the fill to white\n            frame.fills = [\n                {\n                    type: \"SOLID\",\n                    color: { r: 1, g: 1, b: 1 },\n                },\n            ];\n            frame.name = explanationTextTitle;\n            // Set padding for all sides\n            frame.paddingTop = 16;\n            frame.paddingRight = 16;\n            frame.paddingBottom = 16;\n            frame.paddingLeft = 16;\n            // Set corner radius\n            frame.cornerRadius = 8;\n            // Set the width and height to hug contents\n            frame.primaryAxisSizingMode = \"AUTO\";\n            frame.counterAxisSizingMode = \"AUTO\";\n        }\n    });\n}\nfunction generateColorStyle(collection, type) {\n    collection.members.forEach((item) => {\n        const style = figma.createPaintStyle();\n        const colorType = type === \"none\" ? \"light\" : type;\n        const color = item.color[colorType];\n        style.name =\n            type === \"none\"\n                ? `${collection.brand} - ${collection.name}/${item.name}`\n                : `${collection.brand} - ${collection.name}/${type}/${item.name}`;\n        style.paints = [\n            {\n                type: \"SOLID\",\n                color: {\n                    r: util.mapToUnitRange(color.r),\n                    g: util.mapToUnitRange(color.g),\n                    b: util.mapToUnitRange(color.b),\n                },\n                opacity: color.a,\n            },\n        ];\n        style.description = item.description;\n    });\n}\nfunction generateEffectStyle(collection) {\n    collection.members.forEach((item) => {\n        const style = figma.createEffectStyle();\n        style.name = `${collection.brand} - ${collection.name}/${item.name}`;\n        style.description = item.description;\n        // Assuming Effect is defined elsewhere in your codebase\n        style.effects = item.effects.map((effect) => (Object.assign({}, effect)));\n    });\n}\nfunction generateTextNode(collection) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const verticalSpacing = 32;\n        let currentYPosition = 0;\n        const texts = [];\n        const viewport = util.getCurrentViewport();\n        // Load all necessary fonts\n        const fontsToLoad = [\n            { family: \"Inter\", style: \"Regular\" },\n            { family: \"Inter\", style: \"Semi Bold\" },\n        ];\n        yield Promise.all(fontsToLoad.map((font) => figma.loadFontAsync(font)));\n        const notificationText = figma.createText();\n        notificationText.characters = `Change the typeface of below text layer, then click \"Shortcut => Generate Text Style\" from plugin.`;\n        notificationText.fontSize = 32;\n        notificationText.x = viewport.x;\n        notificationText.y = currentYPosition;\n        notificationText.fills = [{ type: \"SOLID\", color: { r: 1, g: 0, b: 0 } }];\n        currentYPosition += notificationText.height + verticalSpacing;\n        for (const item of collection.members) {\n            const textNode = figma.createText();\n            textNode.characters = `${collection.brand} - ${collection.name}/${item.name}`;\n            textNode.fontSize = item.fontSize;\n            textNode.lineHeight = { value: item.fontSize, unit: \"PIXELS\" };\n            // Set font properties\n            const fontWeightStyle = item.fontWeight === \"regular\" ? \"Regular\" : \"Semi Bold\";\n            textNode.fontName = { family: \"Inter\", style: fontWeightStyle };\n            textNode.fills = [{ type: \"SOLID\", color: { r: 0, g: 0, b: 0 } }];\n            // Set the position of the text node\n            textNode.x = viewport.x;\n            textNode.y = currentYPosition;\n            // Update the currentYPosition for the next text node\n            currentYPosition += textNode.height + verticalSpacing;\n            figma.currentPage.appendChild(textNode);\n            texts.push(textNode);\n        }\n        // Select the created text nodes\n        figma.currentPage.selection = texts;\n        // Zoom to fit the selected nodes in the viewport\n        figma.viewport.scrollAndZoomIntoView(texts);\n    });\n}\n","import * as util from \"./util\";\nexport function renameSelectedObjects(message) {\n    const selection = util.getCurrentSelection();\n    if (selection.length === 0) {\n        figma.notify(\"❌ Please select at least one object.\");\n        return;\n    }\n    const predefinedNames = {\n        image: \"Image\",\n        text: \"Text\",\n        frame: \"Frame\",\n        group: \"Group\",\n        rectangle: \"Rectangle\",\n        ellipse: \"Ellipse\",\n        line: \"Line\",\n        polygon: \"Polygon\",\n        star: \"Star\",\n        vector: \"Vector\",\n        auto_layout_horizontal: \"H Auto Layout\",\n        auto_layout_vertical: \"V Auto Layout\",\n    };\n    function renameNode(node) {\n        if (message.docOptions.skipLockedLayer && node.locked) {\n            return;\n        }\n        if (node.name.startsWith(\"%\") && node.name.endsWith(\"%\")) {\n            // 跳過我自定義的變數格式\n            return;\n        }\n        if (message.renameTarget.includes(\"TEXT\") && node.type === \"TEXT\") {\n            const textNode = node;\n            node.name = textNode.characters;\n        }\n        else if (message.renameTarget.includes(\"IMAGE\") &&\n            node.type === \"RECTANGLE\" &&\n            util.hasImageFill(node)) {\n            node.name = predefinedNames.image;\n        }\n        else if (message.renameTarget.includes(\"FRAME\") &&\n            node.type === \"FRAME\") {\n            if (node.layoutMode === \"HORIZONTAL\") {\n                node.name = predefinedNames.auto_layout_horizontal;\n            }\n            else if (node.layoutMode === \"VERTICAL\") {\n                node.name = predefinedNames.auto_layout_vertical;\n            }\n            else {\n                node.name = predefinedNames.frame;\n            }\n        }\n        else if (message.renameTarget.includes(\"GROUP\") &&\n            node.type === \"GROUP\") {\n            node.name = predefinedNames.group;\n        }\n        else if (message.renameTarget.includes(\"RECTANGLE\") &&\n            node.type === \"RECTANGLE\") {\n            node.name = predefinedNames.rectangle;\n        }\n        else if (message.renameTarget.includes(\"ELLIPSE\") &&\n            node.type === \"ELLIPSE\") {\n            node.name = predefinedNames.ellipse;\n        }\n        else if (message.renameTarget.includes(\"LINE\") && node.type === \"LINE\") {\n            node.name = predefinedNames.line;\n        }\n        else if (message.renameTarget.includes(\"POLYGON\") &&\n            node.type === \"POLYGON\") {\n            node.name = predefinedNames.polygon;\n        }\n        else if (message.renameTarget.includes(\"STAR\") && node.type === \"STAR\") {\n            node.name = predefinedNames.star;\n        }\n        else if (message.renameTarget.includes(\"VECTOR\") &&\n            node.type === \"VECTOR\") {\n            node.name = predefinedNames.vector;\n        }\n        if (\"children\" in node) {\n            for (const child of node.children) {\n                renameNode(child);\n            }\n        }\n    }\n    function deleteHiddenLayers(node) {\n        if (node.visible === false) {\n            node.remove();\n            return;\n        }\n        if (\"children\" in node) {\n            for (const child of node.children) {\n                deleteHiddenLayers(child);\n            }\n        }\n    }\n    selection.forEach((selectedNode) => {\n        if (!selectedNode) {\n            figma.notify(\"❌ The selected object is invalid.\");\n            return;\n        }\n        if (message.docOptions.deleteHiddenLayer) {\n            deleteHiddenLayers(selectedNode);\n        }\n        else {\n            renameNode(selectedNode);\n        }\n    });\n    figma.notify(\"✅ The selected object has been renamed.\");\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as util from \"./util\";\nexport function reception(message) {\n    if (message.phase == undefined) {\n        console.log(\"沒有設定訊息的phase !\");\n        return;\n    }\n    if (message.phase == \"Init\") {\n        initVariableEditor();\n    }\n    if (message.phase == \"Actual\") {\n        switch (message.intent) {\n            case \"getAvailableMode\":\n                handleGetAvailableModeList(message);\n                break;\n            case \"executeCode\":\n                executeCode(message);\n                break;\n            default:\n                break;\n        }\n    }\n    // Do other things\n}\nfunction handleVariableCreation(parsedCode, collection, message, existingVariables) {\n    return __awaiter(this, void 0, void 0, function* () {\n        for (const item of parsedCode) {\n            // Check if the variable already exists\n            const existingVariable = existingVariables.find((v) => v.name === item.name);\n            let value = item.value;\n            if (message.dataType === \"COLOR\") {\n                value = util.hexToRgb(item.value);\n            }\n            if (existingVariable) {\n                // Handle the case where the variable already exists\n                console.log(`Variable with name \"${item.name}\" already exists. Skipping creation.`);\n            }\n            else {\n                try {\n                    // Create a new variable if it doesn't already exist\n                    const variable = figma.variables.createVariable(item.name, collection, message.dataType);\n                    if (message.scope.includes(\"ALL_SCOPES\")) {\n                        variable.scopes = [\"ALL_SCOPES\"];\n                    }\n                    else if (message.scope.includes(\"ALL_FILLS\")) {\n                        // Remove \"FRAME_FILL\", \"SHAPE_FILL\", and \"TEXT_FILL\" from message.scope\n                        variable.scopes = message.scope.filter((scope) => ![\"FRAME_FILL\", \"SHAPE_FILL\", \"TEXT_FILL\"].includes(scope));\n                    }\n                    else {\n                        variable.scopes = message.scope;\n                    }\n                    if (message.mode != \"\") {\n                        variable.setValueForMode(message.mode, value);\n                    }\n                    else {\n                        const modeId = collection.modes[0].modeId;\n                        variable.setValueForMode(modeId, value);\n                    }\n                    console.log(`Variable with name \"${item.name}\" created successfully.`);\n                }\n                catch (error) {\n                    console.error(`Error creating variable with name \"${item.name}\":`, error);\n                }\n            }\n        }\n        updateVariableCollectionListMessage();\n    });\n}\nfunction updateVariableCollectionListMessage() {\n    return __awaiter(this, void 0, void 0, function* () {\n        // 取得可用的collection名單\n        const collectionList = yield getAvailableCollectionList();\n        // Extract only the id and name properties\n        const simplifiedCollectionList = collectionList.map((collection) => ({\n            id: collection.id,\n            name: collection.name,\n        }));\n        const message = {\n            collections: simplifiedCollectionList,\n            module: \"VariableEditor\",\n            direction: \"Outer\",\n            phase: \"Actual\",\n            mode: \"UpdateVariableCollectionList\",\n        };\n        util.sendMessageBack(message);\n    });\n}\nfunction findExistingVariables(ids) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Fetch existing variables in the collection\n        const existingVariablesId = ids;\n        const existingVariables = [];\n        existingVariablesId.forEach((item) => __awaiter(this, void 0, void 0, function* () {\n            const tempVar = yield figma.variables.getVariableByIdAsync(item);\n            if (tempVar) {\n                existingVariables.push(tempVar);\n            }\n        }));\n        return existingVariables;\n    });\n}\nfunction executeCode(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let parsedCode;\n        let collection;\n        if (message.code == \"\") {\n            figma.notify(\"❌ The content of custom code must not be empty.\");\n            return;\n        }\n        if (message.destination == \"\" || message.destination == \"new\") {\n            if (message.newCollectionName != undefined) {\n                collection = figma.variables.createVariableCollection(message.newCollectionName);\n            }\n            else {\n                collection = figma.variables.createVariableCollection(\"New Collection\");\n            }\n        }\n        else {\n            collection = yield figma.variables.getVariableCollectionByIdAsync(message.destination);\n            if (collection == null) {\n                figma.notify(\"❌ Cannot find correspoding variable collection by ID provided.\");\n                return;\n            }\n        }\n        const existingVariables = yield findExistingVariables(collection.variableIds);\n        switch (message.dataType) {\n            case \"BOOLEAN\":\n                parsedCode = JSON.parse(message.code);\n                yield handleVariableCreation(parsedCode, collection, message, existingVariables);\n                break;\n            case \"COLOR\":\n                parsedCode = JSON.parse(message.code);\n                yield handleVariableCreation(parsedCode, collection, message, existingVariables);\n                break;\n            case \"FLOAT\":\n                parsedCode = JSON.parse(message.code);\n                yield handleVariableCreation(parsedCode, collection, message, existingVariables);\n                break;\n            case \"STRING\":\n                parsedCode = JSON.parse(message.code);\n                yield handleVariableCreation(parsedCode, collection, message, existingVariables);\n                break;\n            default:\n                figma.notify(\"❌ Unsupported data type\");\n                break;\n        }\n    });\n}\nfunction handleGetAvailableModeList(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const modes = yield getAvailableModeList(message.id);\n        const messageToSent = {\n            modes: modes,\n            module: \"VariableEditor\",\n            direction: \"Outer\",\n            phase: \"Actual\",\n            mode: \"UpdateVariableCollectionMode\",\n        };\n        util.sendMessageBack(messageToSent);\n    });\n}\nfunction initVariableEditor() {\n    return __awaiter(this, void 0, void 0, function* () {\n        // console.log(\"❇️🥹Init Variable Editor\");\n        updateVariableCollectionListMessage();\n    });\n}\n// 取得可用的變數集合名單\nfunction getAvailableCollectionList() {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Fetch all variable collections in the document\n        const collections = yield figma.variables.getLocalVariableCollectionsAsync();\n        return collections;\n    });\n}\n// 取得可用的Mode名單\nfunction getAvailableModeList(collectionId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Fetch the variable collection by ID\n        const collection = yield figma.variables.getVariableCollectionByIdAsync(collectionId);\n        if (!collection) {\n            throw new Error(`Collection with ID ${collectionId} not found`);\n        }\n        // Return the modes in the collection\n        return collection.modes;\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as util from \"./util\";\nexport function reception(message) {\n    if (message.phase == undefined) {\n        console.log(\"沒有設定訊息的phase !\");\n        return;\n    }\n    if (message.phase == \"Init\") {\n        initVirtualProfile();\n    }\n    if (message.phase == \"Actual\") {\n        applyVirtualProfileValueToTextNode(message);\n    }\n    if (message.phase == \"WillEnd\") {\n        virtualProfileWillEnd(message);\n    }\n}\nfunction initVirtualProfile() {\n    const pluginDataKey = \"virtual-profile\";\n    const data = figma.root.getPluginData(pluginDataKey);\n    console.log(\"Plugin Data\");\n    console.log(data);\n    if (data === \"\") {\n        // 未設置過virtual profile\n        const vp = {\n            name: \"John Doe\",\n            nickname: \"Johnny\",\n            gender: \"Male\",\n            birthday: \"1990/01/01\",\n            email: \"johndoe@example.com\",\n            cardNum: \"1234-5678-9012-3456\",\n            landlineNum: \"555-1234\",\n            phoneNum: \"555-987-6543\",\n            address: \"123 Main St, Anytown, USA\",\n            companyName: \"Doe Industries\",\n            companyAddress: \"456 Industrial Way, Suite 100, Anytown, USA\",\n            companyPhoneNum: \"555-1122\",\n            custom1: \"Custom Field 1\",\n            custom2: \"Custom Field 2\",\n            custom3: \"Custom Field 3\",\n            age: \"20\",\n            country: \"Country\",\n            city: \"City\",\n            expirationDate: \"1990/01/01\",\n            cvv: \"000\",\n            cardNetwork: \"MasterCard\",\n            username: \"@johnniedoe123\",\n            userId: \"0000-1234-5678\",\n            jobTitle: \"Designer\",\n            industry: \"Art & Design\",\n        };\n        // Save vp as a JSON string\n        figma.root.setPluginData(pluginDataKey, JSON.stringify(vp));\n        const message = {\n            virtualProfile: vp,\n            module: \"VirtualProfile\",\n            direction: \"Outer\",\n            phase: \"Init\",\n        };\n        util.sendMessageBack(message);\n    }\n    else {\n        // 有設置virtual profile\n        const vp = JSON.parse(data);\n        const message = {\n            virtualProfile: vp,\n            module: \"VirtualProfile\",\n            direction: \"Outer\",\n            phase: \"Init\",\n        };\n        util.sendMessageBack(message);\n    }\n}\nfunction virtualProfileWillEnd(message) {\n    const pluginDataKey = \"virtual-profile\";\n    const vp = message.virtualProfile;\n    console.log(\"🔴 virtualProfileWillEnd\");\n    console.log(vp);\n    // Save vp as a JSON string\n    figma.root.setPluginData(pluginDataKey, JSON.stringify(vp));\n}\nfunction applyVirtualProfileValueToTextNode(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const selection = util.getCurrentSelection();\n        if (selection.length === 0) {\n            figma.notify(\"❌ Please select at least one text layer.\");\n            return;\n        }\n        const textNodes = selection.filter((node) => node.type === \"TEXT\");\n        if (textNodes.length === 0) {\n            figma.notify(\"❌ No text layers selected.\");\n            return;\n        }\n        if (message.virtualProfileValue === \"\") {\n            figma.notify(\"❌ Value cannot be blank.\");\n            return;\n        }\n        try {\n            for (const textNode of textNodes) {\n                yield figma.loadFontAsync(textNode.fontName);\n                textNode.characters = message.virtualProfileValue;\n                const vp = {\n                    virtualProfileKey: message.virtualProfileKey,\n                    virtualProfileValue: message.virtualProfileValue,\n                };\n                textNode.setPluginData(\"virtual-profile-object\", JSON.stringify(vp));\n            }\n            figma.notify(`✅ Text nodes updated successfully (${textNodes.length} layer(s)).`);\n        }\n        catch (error) {\n            figma.notify(\"❌ Failed to load font.\");\n        }\n    });\n}\n","// 功能模組\nimport * as init from \"./module/init\";\nimport * as spaciiing from \"./module/spaciiing\";\nimport * as framer from \"./module/framer\";\nimport * as memorizer from \"./module/memorizer\";\nimport * as shortcut from \"./module/shortcut\";\nimport * as lorem from \"./module/loremGenerator\";\nimport * as instantiater from \"./module/instantiater\";\nimport * as renamer from \"./module/renamer\";\nimport * as variableEditor from \"./module/variableEditor\";\nimport * as virtualProfile from \"./module/virtualProfile\";\nimport * as selectionFilter from \"./module/selectionFilter\";\nimport * as util from \"./module/util\";\nimport * as licenseManagement from \"./module/licenseManagement\";\nfigma.showUI(__html__, { themeColors: true });\nfigma.ui.resize(360, 500);\nfigma.ui.onmessage = (message) => {\n    console.log(message);\n    switch (message.module) {\n        case \"Init\":\n            init.init();\n            break;\n        case \"Spaciiing\":\n            spaciiing.useSpacing(message);\n            break;\n        case \"Framer\":\n            framer.useEqual(message);\n            break;\n        case \"Memorizer\":\n            memorizer.useQuickAction(message);\n            break;\n        case \"Shortcut\":\n            shortcut.executeShortcut(message);\n            break;\n        case \"Renamer\":\n            renamer.renameSelectedObjects(message);\n            break;\n        case \"VariableEditor\":\n            variableEditor.reception(message);\n            break;\n        case \"VirtualProfile\":\n            virtualProfile.reception(message);\n            break;\n        case \"Instantiater\":\n            instantiater.instantiateTarget(message);\n            break;\n        case \"LoremGenerator\":\n            lorem.makeLorem(message);\n            break;\n        case \"SelectionFilter\":\n            selectionFilter.reception(message);\n            break;\n        case \"LicenseManagement\":\n            licenseManagement.reception(message);\n            break;\n        default:\n            break;\n    }\n};\n// Function to execute before the plugin is closed\nconst handlePluginClose = () => {\n    console.log(\"Plugin is about to be closed.\");\n    const message = {\n        module: \"VirtualProfile\",\n        direction: \"Outer\",\n        mode: \"PullVirtualProfile\",\n        phase: \"WillEnd\",\n    };\n    util.sendMessageBack(message);\n};\n// Add event listener for plugin close\nfigma.on(\"close\", handlePluginClose);\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as util from \"./util\";\nimport * as licenseManagement from \"./licenseManagement\";\nexport function init() {\n    return __awaiter(this, void 0, void 0, function* () {\n        // 檢查License狀態\n        yield licenseManagement.initLicenseCheck();\n        const storedWidth = figma.currentPage.getPluginData(\"memorized-object-width\");\n        const storedHeight = figma.currentPage.getPluginData(\"memorized-object-height\");\n        const storedName = figma.currentPage.getPluginData(\"memorized-object-name\");\n        const storedSpacing = figma.currentPage.getPluginData(\"recent-custom-spacing\");\n        // console.log(\n        //   `Init Value [w${storedWidth}][h${storedHeight}][name${storedName}][spacing${storedSpacing}]`\n        // );\n        if (storedWidth != \"\" && storedHeight != \"\") {\n            // Send the updated frame size back\n            const message = {\n                module: \"Memorizer\",\n                mode: \"UpdateFrameToMemorizedSize\",\n                memorizedObjectWidth: storedWidth,\n                memorizedObjectHeight: storedHeight,\n                direction: \"Outer\",\n                phase: \"Actual\",\n            };\n            util.sendMessageBack(message);\n        }\n        if (storedName != \"\") {\n            // Send the updated frame size back\n            const message = {\n                module: \"Memorizer\",\n                mode: \"UpdateMemorizedName\",\n                memorizedName: storedName,\n                direction: \"Outer\",\n                phase: \"Actual\",\n            };\n            util.sendMessageBack(message);\n        }\n        if (storedSpacing != undefined) {\n            // console.log(\"customSpacing = \" + storedSpacing);\n            const message = {\n                spacing: storedSpacing,\n                module: \"Spaciiing\",\n                phase: \"Actual\",\n            };\n            util.sendMessageBack(message);\n        }\n    });\n}\n","import * as util from \"./util\";\nexport function useEqual(message) {\n    const selection = util.getCurrentSelection();\n    if (selection.length === 0) {\n        figma.notify(\"❌ No object is selected.\");\n        return;\n    }\n    else if (selection.length > 1) {\n        figma.notify(\"❌ Please select only one object.\");\n        return;\n    }\n    const parent = selection[0];\n    if (parent.type !== \"FRAME\") {\n        figma.notify(\"❌ The uppest selected object must be a frame.\");\n        return;\n    }\n    const child = util.getNodesInSelectedFrame();\n    if (!child || child.length === 0) {\n        figma.notify(\"❌ There is no object inside frame.\");\n        return;\n    }\n    // Group the selected nodes\n    const group = figma.group(child, parent);\n    const { x: spacingX, y: spacingY, width: groupWidth, height: groupHeight, } = group;\n    let newWidth = parent.width;\n    let newHeight = parent.height;\n    switch (message.mode) {\n        case \"topAndBottom\":\n            newHeight = groupHeight + spacingY * 2;\n            parent.resize(parent.width, newHeight);\n            break;\n        case \"leftAndRight\":\n            newWidth = groupWidth + spacingX * 2;\n            parent.resize(newWidth, parent.height);\n            break;\n        case \"all\":\n            newWidth = groupWidth + spacingX * 2;\n            newHeight = groupHeight + spacingY * 2;\n            parent.resize(newWidth, newHeight);\n            break;\n        default:\n            console.warn(`Unsupported mode: ${message.mode}`);\n    }\n    // Notify the distances from the objects to the edges of the frame\n    const leftDistance = spacingX;\n    const rightDistance = newWidth - (spacingX + groupWidth);\n    const topDistance = spacingY;\n    const bottomDistance = newHeight - (spacingY + groupHeight);\n    figma.notify(`Distance to frame edge:\n       L: ${leftDistance},\n       R: ${rightDistance},\n       U: ${topDistance},\n       D: ${bottomDistance}`);\n    // Ungroup the nodes\n    figma.ungroup(group);\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as util from \"./util\";\nimport loremText from \"../assets/loremText.json\";\nexport function makeLorem(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { lang, length } = message;\n        const textContentMap = loremText;\n        let textContent = textContentMap[lang];\n        switch (length) {\n            case \"short\":\n                textContent = textContent.slice(0, 100);\n                break;\n            case \"medium\":\n                textContent = textContent.slice(0, 200);\n                break;\n            case \"long\":\n                // use the whole text, no slicing needed\n                break;\n            default:\n                figma.notify(\"❌ Unknown length type.\");\n                return;\n        }\n        yield figma.loadFontAsync({ family: \"Inter\", style: \"Regular\" });\n        // Create a new text node and set its content\n        const textNode = figma.createText();\n        textNode.characters = textContent;\n        textNode.fontSize = 20;\n        // Position the text node at the center of the current viewport\n        const viewport = util.getCurrentViewport();\n        textNode.x = viewport.x;\n        textNode.y = viewport.y;\n        // Add the text node to the current page\n        figma.currentPage.appendChild(textNode);\n        figma.notify(\"✅ Lorem text is generated.\");\n    });\n}\n","import * as util from \"./util\";\nexport function reception(message) {\n    if (message.phase == \"Actual\") {\n        filterSelection(message);\n    }\n}\nfunction filterSelection(message) {\n    const selection = util.getCurrentSelection();\n    if (selection.length === 0) {\n        figma.notify(\"❌ No layers selected.\");\n        return;\n    }\n    // Function to check if a node is an image (rectangle with image fill)\n    function isImageNode(node) {\n        if (node.type === \"RECTANGLE\" && node.fills) {\n            return util.hasImageFill(node);\n        }\n        return false;\n    }\n    // Recursive function to find all nodes of specified types within the selection\n    function findAllMatchingNodes(nodes) {\n        let matchingNodes = [];\n        for (const node of nodes) {\n            if (message.filterScopes.includes(node.type) ||\n                (message.filterScopes.includes(\"IMAGE\") && isImageNode(node))) {\n                matchingNodes.push(node);\n            }\n            if (\"children\" in node) {\n                matchingNodes = matchingNodes.concat(findAllMatchingNodes(node.children));\n            }\n        }\n        return matchingNodes;\n    }\n    let filteredSelection = findAllMatchingNodes([...selection]);\n    if (filteredSelection.length === 0) {\n        figma.notify(\"❌ No layers match the specified types.\");\n        return;\n    }\n    // Further filter by name if findCriteria is not empty\n    if (message.findCriteria !== \"\") {\n        filteredSelection = filteredSelection.filter((node) => node.name === message.findCriteria);\n        if (filteredSelection.length === 0) {\n            figma.notify(\"❌ No layers match the specified name.\");\n            return;\n        }\n    }\n    // Set the filtered selection as the user's new current selection\n    figma.currentPage.selection = filteredSelection;\n    // Notify the user of the number of matching layers\n    figma.notify(`✅ Found ${filteredSelection.length} layer(s) matching the criteria.`);\n}\n"],"names":["sendMessageBack","message","figma","ui","postMessage","pluginMessage","rgbToHex","r","g","b","withHashTag","Math","round","hexR","toString","padStart","hexG","hexB","getCurrentViewport","viewport","x","center","y","getCurrentSelection","currentPage","selection","mapToUnitRange","value","hasImageFill","node","Array","isArray","fills","some","fill","type","convertColorRange","rgba","a","hexToRgb","hex","replace","bigint","parseInt","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","applySpacingToLayers","layers","spacing","mode","addAutolayout","returnFinalFrame","length","notify","isVerticalMode","axis","sizeProp","sort","compareWithAxis","i","currentLayer","selectionBoundingBox","minX","Infinity","minY","maxX","maxY","forEach","layer","width","height","selectionPosition","autolayoutFrame","createFrame","layoutMode","itemSpacing","appendChild","resize","memorizeObjectSize","dimension","selectedNode","memorizedObjectWidth","setPluginData","String","memorizedObjectHeight","storedWidth","getPluginData","storedHeight","module","direction","phase","setResizableNodeSize","newWidth","Number","newHeight","executeShortcut","undefined","data","root","magicalObject","JSON","parse","initShortcut","action","selectedFrame","rectangle","createRectangle","color","opacity","name","locked","console","log","makeOverlay","generateLableFromObjectFillColor","this","textNodes","filter","fontsToLoad","Set","fontName","add","all","from","map","font","loadFontAsync","fontSize","letterSpacing","lineHeight","newTextStyle","createTextStyle","characters","substring","textDecoration","error","convertSelectionToTextStyles","system","quantity","innerFrameSize","results","outerFrame","innerFrame","constraints","horizontal","vertical","component","createComponent","children","remove","push","item","generateIconTemplate","memorizeSelectedNodeId","frames","getNodeByIdAsync","componentId","instance","createInstance","defaultVariant","member","mostLeftFrame","frame","newInstance","clone","updateDateText","generateMagicalObjectMember","texts","findAllTextLayers","nodes","textLayers","concat","replacedLayersCount","text","oldName","oldText","newText","split","findCriteria","join","replaceCriteria","keepOriginalLayerName","findAndReplaceInSelection","mo","stringify","shortcutWillEnd","textNode","today","Date","getMonth","getDate","child","pluginDataKey","noteId","id","designStatusTagId","titleSectionId","family","style","rectColor","hexColor","createText","rgbColor","instantiateTarget","iosDefaultPalette","iosDefaultDropShadow","iosTypographyLarge","form","target","generateColorStyle","collection","members","createEffectStyle","brand","description","effects","effect","Object","assign","currentYPosition","notificationText","unit","fontWeightStyle","fontWeight","scrollAndZoomIntoView","generateTextNode","variableCollection","variables","createVariableCollection","lightModeId","addMode","darkModeId","variable","createVariable","setValueForMode","light","dark","modes","modeId","removeMode","generateColorVariable","generateExplanationText","explanationTextTitle","explanationTitleNode","explanation","explanationNode","paddingTop","paddingRight","paddingBottom","paddingLeft","cornerRadius","primaryAxisSizingMode","counterAxisSizingMode","createPaintStyle","colorType","paints","renameSelectedObjects","renameNode","docOptions","skipLockedLayer","startsWith","endsWith","renameTarget","includes","deleteHiddenLayers","visible","deleteHiddenLayer","updateVariableCollectionListMessage","initVariableEditor","intent","collectionId","getVariableCollectionByIdAsync","Error","getAvailableModeList","handleGetAvailableModeList","parsedCode","code","destination","newCollectionName","existingVariables","ids","tempVar","getVariableByIdAsync","findExistingVariables","variableIds","dataType","existingVariable","find","v","scope","scopes","handleVariableCreation","executeCode","collections","getLocalVariableCollectionsAsync","getAvailableCollectionList","vp","nickname","gender","birthday","email","cardNum","landlineNum","phoneNum","address","companyName","companyAddress","companyPhoneNum","custom1","custom2","custom3","age","country","city","expirationDate","cvv","cardNetwork","username","userId","jobTitle","industry","virtualProfile","initVirtualProfile","virtualProfileValue","virtualProfileKey","applyVirtualProfileValueToTextNode","virtualProfileWillEnd","showUI","__html__","themeColors","onmessage","STORAGE_KEY","licenseData","clientStorage","getAsync","license","tier","isLicenseActive","licenseKey","sessionExpiredAt","date","hours","resultDate","setHours","getHours","toUTCString","setAsync","storedName","storedSpacing","memorizedName","init","selectedLayers","isNaN","useCustomValue","parent","group","spacingX","spacingY","groupWidth","groupHeight","warn","leftDistance","rightDistance","topDistance","bottomDistance","ungroup","newFrame","makeNewFrame","memorizedObjectName","memorzieObjectName","setSelectionToMemorizedName","lang","textContent","slice","isImageNode","filteredSelection","findAllMatchingNodes","matchingNodes","filterScopes","filterSelection","setLicenseToLocalStorage","on"],"sourceRoot":""}